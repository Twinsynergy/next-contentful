{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\nexport default class MyDocument extends Document {\n  render() {\n    return /*#__PURE__*/_jsxs(Html, {\n      lang: \"en\",\n      children: [/*#__PURE__*/_jsx(Head, {}), /*#__PURE__*/_jsxs(\"body\", {\n        children: [/*#__PURE__*/_jsx(Main, {}), /*#__PURE__*/_jsx(NextScript, {})]\n      })]\n    });\n  }\n\n} // `getInitialProps` belongs to `_document` (instead of `_app`),\n// it's compatible with server-side generation (SSG).\n// MyDocument.getInitialProps = async (ctx) => {\n//   // Resolution order\n//   //\n//   // On the server:\n//   // 1. app.getInitialProps\n//   // 2. page.getInitialProps\n//   // 3. document.getInitialProps\n//   // 4. app.render\n//   // 5. page.render\n//   // 6. document.render\n//   //\n//   // On the server with error:\n//   // 1. document.getInitialProps\n//   // 2. app.render\n//   // 3. page.render\n//   // 4. document.render\n//   //\n//   // On the client\n//   // 1. app.getInitialProps\n//   // 2. page.getInitialProps\n//   // 3. app.render\n//   // 4. page.render\n//   // Render app and page and get the context of the page with collected side effects.\n//   const sheets = new ServerStyleSheets();\n//   const originalRenderPage = ctx.renderPage;\n//   ctx.renderPage = () =>\n//     originalRenderPage({\n//       enhanceApp: (App) => (props) => sheets.collect(<App {...props} />),\n//     });\n//   const initialProps = await Document.getInitialProps(ctx);\n//   return {\n//     ...initialProps,\n//     // Styles fragment is rendered after the app and page rendering finish.\n//     styles: [\n//       ...React.Children.toArray(initialProps.styles),\n//       sheets.getStyleElement(),\n//     ],\n//   };\n// };","map":null,"metadata":{},"sourceType":"module"}